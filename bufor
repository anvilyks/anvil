onSave: async ({ project }) => {
  try {
    console.log("[1] onSave start");

    const assets = editor.AssetManager.getAll().models;
    console.log("[2] AssetManager loaded:", assets);

    const blobToCid = {};
    for (const a of assets) {
      const src = a.get('src');
      const name = a.get('name');
      console.log("[3] Processing asset:", name, src);

      if (src && src.startsWith('blob:')) {
        blobToCid[src] = `cid:${name}`;
        console.log("[4] Mapped blob to cid:", src, "‚Üí", blobToCid[src]);
      }
    }

    function replaceSrcRecursive(components) {
      for (const comp of components || []) {
        if (comp.attributes?.src?.startsWith('blob:')) {
          const oldSrc = comp.attributes.src;
          const newSrc = blobToCid[oldSrc];
          if (newSrc) {
            comp.attributes.src = newSrc;
            console.log("[5] Replaced src:", oldSrc, "‚Üí", newSrc);
          } else {
            console.warn("[5b] Missing cid mapping for:", oldSrc);
          }
        }
        if (comp.components) {
          replaceSrcRecursive(comp.components);
        }
      }
    }

    console.log("[6] Starting component replacement");
    project.pages.forEach(page => {
      console.log("[6.1] Page:", page.name || page.id);
      replaceSrcRecursive(page.components);
    });

    // üîÑ Ustaw nowy stan edytora (to wp≈Çynie na getHtml)
    editor.setProject(project);

    console.log("[7] Final project ready to save:", project);

    const html = editor.getHtml();
    console.log("[8] async result HTML:", html);

    window.save_files_callback(project, html).then(result => {
      console.log("[9] async result:", result);
      console.log("[‚úÖ] Project successfully saved");
    });

  } catch (error) {
    console.error("‚ùå onSave failed:", error);
  }
};
