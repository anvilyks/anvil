import anvil.secrets
import anvil.tables as tables
import anvil.tables.query as q
from anvil.tables import app_tables
import anvil.server
from mjml import mjml_to_html
import anvil.server
import anvil.media



@anvil.server.callable
def save_template(name, html_content):
  app_tables.templates.add_row(name=name, content_html=html_content, created_at=datetime.now())

@anvil.server.callable
def save_templaate(name, project):
  json_str = project
  row = app_tables.emailtemplates.get(name=name)
  if row:
    row['project_json'] = json_str
  else:
    app_tables.emailtemplates.add_row(name=name, project_json=json_str)

@anvil.server.callable
def load_template(name):
  row = app_tables.emailtemplates.get(name=name)
  if not row:
    return {}
  return json.loads(row['project_json'])

  import anvil.server

@anvil.server.http_endpoint("/get-template")
def get_template():
  try:
    
    row = app_tables.emailtemplates.search(name='Generated Template')
    if row:
      row= row[0]
    content = row['Column3']
  
    # JeÅ›li content to tekst JSON â€“ zwrÃ³Ä‡ go jako string (opcjonalnie jako sÅ‚ownik po json.loads)
    return content
  except:
    return "ok"

@anvil.server.http_endpoint("/save-template", methods=["POST"])
def save_template(**kwargs):
  data = anvil.server.request.body_json
  template_id = data.get("template_id")
  content = data.get("content")
  
  # ZakÅ‚adamy, Å¼e content to juÅ¼ JSON-string z edytora (czyli np. JSON.stringify(project))
  # MoÅ¼esz go zapisaÄ‡ jako tekst:
  app_tables.emailtemplates.add_row(
    name=template_id,
    Column3=content
  )
  
  return {
    "status": "ok",
    "saved_template": content
  }

@anvil.server.callable
def test(mjml_code):
  result = mjml_to_html(mjml_code)
  assert not result.errors, f"MJML Errors: {result.errors}"
  html: str = result.html
  html_file = anvil.BlobMedia("text/html", html.encode("utf-8"), name="template.html")
  template_id = "at"
  app_tables.emailtemplates.add_row(
    name=template_id,
    Column3='1',
    Column4=html_file
    
  )

@anvil.server.callable
def save_template_to_db(html, project_json):
  print("ðŸ“© HTML z JS:", html)
  print("ðŸ“¦ JSON z JS:", project_json)
  
  app_tables.emailtemplates.add_row(
    name="Generated Template",
    json1=html,
    Column3=project_json
  )
  return "OK"

@anvil.server.callable
def get_asset_url():
  return anvil.server.get_app_origin() + "/_/theme/baner.png"

@anvil.server.callable
def test_test():
  row = app_tables.emailtemplates.search(name='Generated Template')[0]
  content = row['Column3']

  # JeÅ›li content to tekst JSON â€“ zwrÃ³Ä‡ go jako string (opcjonalnie jako sÅ‚ownik po json.loads)
  return content
