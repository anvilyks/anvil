const blobToCustom = {};
  for (const a of assets) {
    const src = a.get('src');
    const name = a.get('name');
    if (src && name && src.startsWith('blob:')) {
      blobToCustom[src] = `custom:anvil-assets/${name}`;
    }
  }

  function replaceSrcToCustom(components) {
    for (const comp of components || []) {
      const src = comp.attributes?.src;
      if (src && blobToCustom[src]) {
        comp.attributes.src = blobToCustom[src];
      }
      if (comp.components) replaceSrcToCustom(comp.components);
    }
  }

  project.pages.forEach(page => replaceSrcToCustom(page.components));




  const result = await anvil.server.call('get_template_project');
  const assets = editor.AssetManager.getAll().models;

  const customToBlob = {};
  for (const a of assets) {
    customToBlob[`custom:anvil-assets/${a.get('name')}`] = a.get('src');
  }

  function replaceCustomToBlob(components) {
    for (const comp of components || []) {
      const src = comp.attributes?.src;
      if (src && customToBlob[src]) {
        comp.attributes.src = customToBlob[src];
      }
      if (comp.components) replaceCustomToBlob(comp.components);
    }
  }

  result.pages.forEach(page => replaceCustomToBlob(page.components));
  return result;














function replaceSrcToCustom(components) {
  for (const comp of components || []) {
    // Atrybuty (najczęstsze)
    const attrSrc = comp.attributes?.src;
    if (attrSrc && blobToCustom[attrSrc]) {
      comp.attributes.src = blobToCustom[attrSrc];
      console.log("[↪] Replaced attribute src:", attrSrc, "→", blobToCustom[attrSrc]);
    }

    // Bezpośredni src (rzadsze, np. MJML)
    if (comp.src && blobToCustom[comp.src]) {
      comp.src = blobToCustom[comp.src];
      console.log("[↪] Replaced direct comp.src:", comp.src, "→", blobToCustom[comp.src]);
    }

    // Rekurencja
    if (comp.components) replaceSrcToCustom(comp.components);
  }
}
