const copy_project = JSON.parse(JSON.stringify(project));


function replaceBlobToCustomInProject(proj, blobToCustomMap) {
  function recurse(components = []) {
    for (const comp of components) {
      // 1. Atrybuty (np. MJML: attributes.src)
      const attrSrc = comp?.attributes?.src;
      if (attrSrc && blobToCustomMap[attrSrc]) {
        comp.attributes.src = blobToCustomMap[attrSrc];
        console.log(`[✅] Patched attr.src:`, attrSrc, "→", blobToCustomMap[attrSrc]);
      }

      // 2. Bezpośredni src
      if (comp?.src && blobToCustomMap[comp.src]) {
        comp.src = blobToCustomMap[comp.src];
        console.log(`[✅] Patched direct src:`, comp.src);
      }

      // 3. Rekurencja
      if (Array.isArray(comp.components)) {
        recurse(comp.components);
      }
    }
  }

  for (const page of proj.pages || []) {
    recurse(page.components);
  }
}


const copy_project = JSON.parse(JSON.stringify(project));
replaceBlobToCustomInProject(copy_project, blobToCustomMap);
