const copy_project = JSON.parse(JSON.stringify(project));


function replaceBlobToCustomInProject(proj, map) {
  console.log("[5] üöÄ Running blob‚Üícustom replacement");

  function recurse(obj) {
    if (!obj || typeof obj !== 'object') return;

    if (Array.isArray(obj)) {
      for (const item of obj) recurse(item);
      return;
    }

    // Zamiana atrybutu src w attributes
    if (obj.attributes?.src && map[obj.attributes.src]) {
      console.log("[5] üîÅ Replacing attributes.src:", obj.attributes.src);
      obj.attributes.src = map[obj.attributes.src];
    }

    // Zamiana bezpo≈õredniego src
    if (obj.src && map[obj.src]) {
      console.log("[5] üîÅ Replacing direct comp.src:", obj.src);
      obj.src = map[obj.src];
    }

    // Rekurencyjne przeszukiwanie obiektu
    for (const key in obj) {
      recurse(obj[key]);
    }
  }

  for (const page of proj.pages || []) {
    recurse(page);
  }


const copy_project = JSON.parse(JSON.stringify(project));
replaceBlobToCustomInProject(copy_project, blobToCustomMap);


const nativeStringify = (0, eval)('JSON.stringify');
console.log('copy_project =', nativeStringify(copy_project, null, 2));
