# Server Module
import anvil.server, anvil.users, anvil.secrets
from anvil.tables import app_tables
import requests
from requests.auth import HTTPBasicAuth
import datetime as dt

def _enc(text: str):
    # -> Media (bezpieczny blob do przechowywania w Data Table)
    return anvil.secrets.encrypt_with_key("ENC_KEY", text.encode("utf-8"))

def _dec(blob) -> str:
    return anvil.secrets.decrypt_with_key("ENC_KEY", blob).decode("utf-8")

@anvil.server.callable(require_user=True)
def add_account(service: str, username: str, password: str):
    """Użytkownik dodaje/aktualizuje swoje konto – hasło trafia wyłącznie na serwer."""
    user = anvil.users.get_user()
    pair = f"{username}:{password}"
    blob = _enc(pair)
    row = app_tables.user_accounts.get(user=user, service=service)
    if row:
        row.update(cred_blob=blob, updated=dt.datetime.utcnow())
    else:
        app_tables.user_accounts.add_row(user=user, service=service,
                                         cred_blob=blob, created=dt.datetime.utcnow())
    return True

def _basic_tuple_for(user, service):
    row = app_tables.user_accounts.get(user=user, service=service)
    if not row:
        raise RuntimeError("Brak zapisanych danych logowania dla tej usługi.")
    pair = _dec(row['cred_blob'])
    username, password = pair.split(":", 1)
    return username, password

@anvil.server.callable(require_user=True)
def call_api_basic(service: str, path: str, method: str = "GET",
                   json=None, data=None, headers=None, timeout=30):
    """Wywołuje API z Basic Auth używając zaszyfrowanych danych użytkownika."""
    user = anvil.users.get_user()
    u, p = _basic_tuple_for(user, service)
    url = f"https://api.example.com{path}"   # dostosuj bazowy URL
    r = requests.request(method, url,
                         auth=HTTPBasicAuth(u, p),
                         json=json, data=data, headers=headers,
                         timeout=timeout)
    r.raise_for_status()
    # zwróć to, czego potrzebujesz:
    try:
        return r.json()
    except Exception:
        return r.text

@anvil.server.callable(require_user=True)
def delete_account(service: str):
    user = anvil.users.get_user()
    row = app_tables.user_accounts.get(user=user, service=service)
    if row: row.delete()
    return True
